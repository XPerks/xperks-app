// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  roles          String[]
  tokens         Token[]
  sessions       Session[]
  Coach          Coach?
  Student        Student?
  avatar         String?
}

// model GamePlatform {
//   id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   name      String
//   students  Student[]
//   coaches   Coach[]
// }

model Coach {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  featuredImage String?
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?     @unique
  username      String?
  verified      Boolean  @default(false)
  // learningPaths        LearningPath[]
  // tutorials            Tutorial[]
  // CoachGameIntegration CoachGameIntegration[]
  // Team                 Team?
  // platforms            GamePlatform[]
  // coachingSessions     CoachingSession[]
  // services             CoachService[]
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @unique
  username  String?
  // LearningPaths                   LearningPath[]
  // StudentGameIntegration StudentGameIntegration[]
  // comments                        TutorialComments[]
  // StudentLearningPathStepProgress StudentLearningPathStepProgress[]
  // TeamMembership                  TeamMember?
  // platforms              GamePlatform[]
  // coachingSessions       CoachingSession[]
}

// model CoachService {
//   id                          Int                          @id @default(autoincrement())
//   createdAt                   DateTime                     @default(now())
//   updatedAt                   DateTime                     @updatedAt
//   coach                       Coach                        @relation(fields: [coachId], references: [id])
//   coachId                     Int
//   coachingSessions            CoachingSession[]
//   price                       Int
//   game                        Game                         @relation(fields: [gameId], references: [id])
//   gameId                      Int
//   description                 String
//   title                       String
//   duration                    Int
//   coachServiceSurveyQuestions CoachServiceSurveyQuestion[]
// }

// model CoachServiceSurveyQuestion {
//   id             Int          @id @default(autoincrement())
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @updatedAt
//   question       String
//   coachService   CoachService @relation(fields: [coachServiceId], references: [id])
//   coachServiceId Int
// }

// model CoachingSession {
//   id             Int          @id @default(autoincrement())
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @updatedAt
//   coach          Coach?       @relation(fields: [coachId], references: [id])
//   coachId        Int?
//   student        Student?     @relation(fields: [studentId], references: [id])
//   studentId      Int?
//   caochService   CoachService @relation(fields: [coachServiceId], references: [id])
//   coachServiceId Int
//   scheduledDate  DateTime
//   isStarted      Boolean      @default(false)
//   isCompleted    Boolean      @default(false)
//   isRescheduled  Boolean      @default(false)
// }

// model StudentGameIntegration {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   student   Student? @relation(fields: [studentId], references: [id])
//   studentId Int?
//   game      Game?    @relation(fields: [gameId], references: [id])
//   gameId    Int?
//   username  String?
//   meta      Json?
// }

// model CoachGameIntegration {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   coach     Coach?   @relation(fields: [coachId], references: [id])
//   coachId   Int?
//   game      Game?    @relation(fields: [gameId], references: [id])
//   gameId    Int?
//   username  String?
//   meta      Json?
// }

// model Team {
//   id      Int          @id @default(autoincrement())
//   name    String
//   members TeamMember[]
//   logo    String
//   game    Game         @relation(fields: [gameId], references: [id])
//   gameId  Int
//   coach   Coach?       @relation(fields: [coachId], references: [id])
//   coachId Int?         @unique
// }

// model TeamMember {
//   id        Int     @id @default(autoincrement())
//   position  String
//   student   Student @relation(fields: [studentId], references: [id])
//   Team      Team?   @relation(fields: [teamId], references: [id])
//   teamId    Int?
//   studentId Int     @unique
// }

// model LearningPath {
//   id         Int      @id @default(autoincrement())
//   title      String
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   activeStep Int      @default(0)

//   steps    LearningPathStep[]
//   Coach    Coach?             @relation(fields: [coachId], references: [id])
//   coachId  Int?
//   students Student[]
// }

// model LearningPathStep {
//   id                              Int                               @id @default(autoincrement())
//   name                            String
//   goals                           String[]
//   LearningPath                    LearningPath?                     @relation(fields: [learningPathId], references: [id])
//   learningPathId                  Int?
//   StudentLearningPathStepProgress StudentLearningPathStepProgress[]
// }

// model LearningPathStepComment {
//   id Int @id @default(autoincrement())

// }

// model StudentLearningPathStepProgress {
//   id                 Int               @id @default(autoincrement())
//   student            Student?          @relation(fields: [studentId], references: [id])
//   learningPathStep   LearningPathStep? @relation(fields: [learningPathStepId], references: [id])
//   studentId          Int?
//   learningPathStepId Int?
//   progress           Int
// }

model Game {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  avatar    String?
  thumbnail String?
  banner    String?
  cover     String?
  priority  Int?
  // tutorials             Tutorial[]
  // players               StudentGameIntegration[]
  // coachGameIntegrations CoachGameIntegration[]
  // Team                 Team[]
  // coachServices         CoachService[]
}

// model Tutorial {
//   id          Int      @id @default(autoincrement())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   author      Coach?   @relation(fields: [authorId], references: [id])
//   authorId    Int?
//   title       String
//   description String
//   body        String
//   game        Game?    @relation(fields: [gameId], references: [id])
//   gameId      Int?
//   // comments  TutorialComments[]
// }

// model TutorialComments {
//   id         Int                 @id @default(autoincrement())
//   author     Student?            @relation(fields: [authorId], references: [id])
//   authorId   Int?
//   tutorial   Tutorial?           @relation(fields: [tutorialId], references: [id])
//   tutorialId Int?
//   createdAt  DateTime            @default(now())
//   updatedAt  DateTime            @updatedAt
//   body       String
//   rating     StudentCoachRating? @relation(fields: [ratingId], references: [id])
//   ratingId   Int?                @unique
// }

// model StudentCoachRating {
//   id              Int      @id @default(autoincrement())
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
//   overall         Decimal?
//   reliability     Decimal?
//   teachability    Decimal?
//   punctuality     Decimal?
//   overalKnowledge Decimal?
//   // TutorialComments TutorialComments?
// }

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

//ENUMS
// --------------------------------------

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
enum TokenType {
  RESET_PASSWORD
}

// enum Role {
//   COACH
//   STUDENT
//   ADMIN
// }
